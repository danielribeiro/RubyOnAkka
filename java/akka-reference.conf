####################
# Akka Config File #
####################

# This file has all the default settings, so all these could be removed with no visible effect.
# Modify as needed.

akka {
  version = "0.10" # Akka version, checked against the runtime version of Akka.

  time-unit = "seconds" # Default timeout time unit for all timeout properties throughout the config

  # These boot classes are loaded (and created) automatically when the Akka Microkernel boots up
  #     Can be used to bootstrap your application(s)
  #     Should be the FQN (Fully Qualified Name) of the boot class which needs to have a default constructor
  boot = ["sample.camel.Boot",
          "sample.rest.java.Boot",
          "sample.rest.scala.Boot",
          "sample.security.Boot"]

  actor {
    timeout = 5                        # Default timeout for Future based invocations
                                       #    - Actor:        !! && !!!
                                       #    - UntypedActor: sendRequestReply && sendRequestReplyFuture
                                       #    - TypedActor:   methods with non-void return type
    serialize-messages = off           # Does a deep clone of (non-primitive) messages to ensure immutability
    throughput = 5                     # Default throughput for all ExecutorBasedEventDrivenDispatcher, set to 1 for complete fairness

    default-dispatcher {
      type = "GlobalExecutorBasedEventDriven" # Must be one of the following, all "Global*" are non-configurable
                                              #   - Hawt
                                              #   - ExecutorBasedEventDriven
                                              #   - ExecutorBasedEventDrivenWorkStealing
                                              #   - ReactorBasedThreadPoolEventDriven
                                              #   - ReactorBasedSingleThreadEventDriven
                                              #   - GlobalHawt
                                              #   - GlobalExecutorBasedEventDriven
                                              #   - GlobalReactorBasedSingleThreadEventDriven
                                              #   - GlobalReactorBasedThreadPoolEventDriven
      keep-alive-ms = 60000            # Keep alive time for threads
      core-pool-size-factor = 1.0      # No of core threads ... ceil(available processors * factor)
      max-pool-size-factor  = 4.0      # Max no of threads ... ceil(available processors * factor)
      executor-bounds = -1             # Makes the Executor bounded, -1 is unbounded
      allow-core-timeout = on          # Allow core threads to time out
      rejection-policy = "caller-runs" # abort, caller-runs, discard-oldest, discard
      throughput = 5                   # Throughput for ExecutorBasedEventDrivenDispatcher, set to 1 for complete fairness
      aggregate = off                  # Aggregate on/off for HawtDispatchers
      mailbox-capacity = -1            # If negative (or zero) then an unbounded mailbox is used (default)
                                       # If positive then a bounded mailbox is used and the capacity is set using the property
                                       # NOTE: setting a mailbox to 'blocking' can be a bit dangerous,
                                       #       could lead to deadlock, use with care
    }
  }

  stm {
    fair = on             # Should global transactions be fair or non-fair (non fair yield better performance)
    jta-aware = off       # Option 'on' means that if there JTA Transaction Manager available then the STM will
                          #     begin (or join), commit or rollback the JTA transaction. Default is 'off'.
    timeout = 5           # Default timeout for blocking transactions and transaction set (in unit defined by
                          #     the time-unit property)
  }

  jta {
    provider = "from-jndi" # Options: - "from-jndi" (means that Akka will try to detect a TransactionManager in the JNDI)
                           #          - "atomikos" (means that Akka will use the Atomikos based JTA impl in 'akka-jta',
                           #            e.g. you need the akka-jta JARs on classpath).
    timeout = 60
  }

  rest {
    service = on
    hostname = "localhost"
    port = 9998
    filters = ["se.scalablesolutions.akka.security.AkkaSecurityFilterFactory"] # List with all jersey filters to use
    resource_packages = ["sample.rest.scala",
                         "sample.rest.java",
                         "sample.security"]  # List with all resource packages for your Jersey services
    authenticator = "sample.security.BasicAuthenticationService" # The authentication service to use. Need to be overridden (sample now)

    comet-dispatcher {
      #type = "Hawt" # Uncomment if you want to use a different dispatcher than the default one for Comet
    }
    # maxInactiveActivity = 60000 # Atmosphere CometSupport maxInactiveActivity

    # Uncomment if you are using the KerberosAuthenticationActor
    # kerberos {
    #   servicePrincipal = "HTTP/localhost@EXAMPLE.COM"
    #   keyTabLocation   = "URL to keytab"
    #   kerberosDebug    = "true"
    #   realm            = "EXAMPLE.COM"
    # }
  }

  remote {
    compression-scheme = "zlib" # Options: "zlib" (lzf to come), leave out for no compression
    zlib-compression-level = 6  # Options: 0-9 (1 being fastest and 9 being the most compressed), default is 6

    ssl {
      service = off # NOTE: This feature is not deemed production ready and is not possible to turn on yet

      # You can either use java command-line options or use the settings below

      #key-store-type = "pkcs12"         # Same as -Djavax.net.ssl.keyStoreType=pkcs12
      #key-store = "yourcertificate.p12" # Same as -Djavax.net.ssl.keyStore=yourcertificate.p12
      #key-store-pass = "$PASS"          # Same as -Djavax.net.ssl.keyStorePassword=$PASS

      #trust-store-type = "jks"          # Same as -Djavax.net.ssl.trustStoreType=jks
      #trust-store = "your.keystore"     # Same as -Djavax.net.ssl.trustStore=your.keystore
      #trust-store-pass = "$PASS"        # Same as -Djavax.net.ssl.trustStorePassword=$PASS

      debug = off # This can be useful for debugging. If on, very verbose debug, same as -Djavax.net.debug=ssl
    }

    server {
      service = on
      hostname = "localhost"  # The hostname or IP that clients should connect to
      port = 9999             # The port clients should connect to
      connection-timeout = 1
    }

    client {
      reconnect-delay = 5
      read-timeout = 10
      reconnection-time-window = 600 # Maximum time window that a client should try to reconnect for
    }

    cluster {
      service = on
      name = "default"                                                        # The name of the cluster
      serializer = "se.scalablesolutions.akka.serialization.Serializer$Java$" # FQN of the serializer class
    }
  }

  storage {
    cassandra {
      hostname = "127.0.0.1"        # IP address or hostname of one of the Cassandra cluster's seeds
      port = 9160                   # Port to Cassandra
      consistency-level = "QUORUM"  # Options: ZERO, ONE, QUORUM, DCQUORUM, DCQUORUMSYNC, ALL, ANY
    }

    mongodb {
      hostname = "127.0.0.1"        # IP address or hostname of the MongoDB DB instance
      port = 27017                  # Port to MongoDB
      dbname = "mydb"
    }

    redis {
      hostname = "127.0.0.1"        # IP address or hostname of the Redis instance
      port = 6379                   # Port to Redis
    }
  }
}
